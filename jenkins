pipeline {
    agent any

    stages {
        stage('Git Checkout') {
            steps {
                git credentialsId: 'github', url: 'https://github.com/Shiva-ponnaganti/Jenkins'
            }
        }
        
        stage('Build') {
            steps {
                sh 'mvn clean package'
            }
        }
        
        stage('Static code Analysis') {
            environment {
                SONAR_URL = "http://192.168.29.47:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }    
        }
        
        stage('Build and Push Image') {
            environment {
                DOCKER_IMAGE = "shivaponnaganti/spring-boot-app:${BUILD_NUMBER}"
                // DOCKERFILE_LOCATION = "spring-boot-app/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('docker-cr')
            }
            steps {
                script {
                    sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://registry.hub.docker.com/', "docker-cr") {
                    dockerImage.push()
                    }
                }
            }
        }
            
        stage('Deploy App') {
            
            steps {
                sh 'docker run -d -p 8090:8080 shivaponnaganti/spring-boot-app:${BUILD_NUMBER}'
            }
        }
        
        
        
        
    }
}
